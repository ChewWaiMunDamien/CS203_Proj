name: Java CI with Maven and NPM (CD with Docker)

on:
  push:
    branches: 
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Node.js for the frontend
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.*'  # Version for React app

    # Install frontend dependencies and build the React app
    - name: Install dependencies and build frontend
      run: |
        cd fullstack-proj-frontend
        npm ci
        npm run build

    # Set up JDK 17 for the backend
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Build backend with Maven
    - name: Build backend with Maven
      run: |
        cd fullstack-backend-proj2
        mvn -B package --file pom.xml
        # mvn install -DskipTests #Skip tests for now

    # Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-image:latest .

    # Log in to Docker Hub (or other registry)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password or token

    # Push Docker image to Docker Hub (or other registry)
    - name: Push Docker image to Docker Hub
      run: |
        # docker push ${{ secrets.DOCKER_USERNAME }}/backend-image:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Checkout code again (needed in subsequent jobs)
    - name: Checkout code
      uses: actions/checkout@v4

    # Deploy Backend to EC2
    - name: Deploy Backend to EC2
      env:
        EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # Add your EC2 private key in secrets
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}  # EC2 public IP or DNS
        EC2_USER: 'ubuntu'  # or ec2-user, depending on AMI
        DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/backend-image:latest  # Image in Docker Hub
      run: |
        # Create a temporary file for the SSH private key
        echo "$EC2_SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # SSH into the EC2 instance and deploy the Docker containers
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_PUBLIC_IP << EOF
          sudo apt-get update -y

          # Log in to Docker Hub
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # Pull or Build Docker images (if not built on EC2 already)
          # docker pull $BACKEND_DOCKER_IMAGE

          # Stop any existing containers
          # docker ps -q --filter "name=backend" | xargs -I {} docker stop {}
          # docker ps -q --filter "name=frontend" | xargs -I {} docker stop {}

          # Run the backend container (adjust ports as necessary)
          # docker run -d --name backend -p 8080:8080 $BACKEND_DOCKER_IMAGE
          
        EOF

        # Clean up the private key
        rm private_key.pem

    # Deploy frontend to Cloudflare Pages using the correct action
    - name: Deploy frontend to Cloudflare Pages
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: # pages deploy fullstack-proj-frontend/dist --project-name=chess-comps.com

